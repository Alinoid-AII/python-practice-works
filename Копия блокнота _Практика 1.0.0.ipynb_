{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1M-O_KUCtKLJnPKgWsQQu9bkGfa2vOHnO","timestamp":1732010569568}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["ФИО:"],"metadata":{"id":"fLDS5f_mCnPa"}},{"cell_type":"markdown","source":["# Задание (совместное с преподавателем)\n","\n","\n"],"metadata":{"id":"-CSHUbWzCqeM"}},{"cell_type":"markdown","source":["Напишите систему для учёта отпусков с возможностью узнавать, сколько дней отпуска осталось у того или иного сотрудника.\n","Для этого создайте класс Employee со следующими методами:\n","\n","- Метод consume_vacation должен отвечать за списание дней отпуска.\n","\n","Единственный параметр этого метода (кроме self) — количество потраченных отпускных дней (целое число).\n","\n","При вызове метода consume_vacation соответствующее количество дней должно вычитаться из общего числа доступных отпускных дней сотрудника.\n","\n","Чтобы определить число доступных отпускных дней конкретного сотрудника, в классе опишите атрибут экземпляра remaining_vacation_days, который по умолчанию будет равен значению атрибута класса vacation_days, и используйте этот атрибут в работе метода.\n","\n","- Метод get_vacation_details должен возвращать остаток отпускных дней сотрудника в формате: ```Остаток отпускных дней: <число>.```\n","\n","\n","Чтобы проверить работу программы:\n","1. Создайте экземпляр класса Employee.\n","2. Вызовите метод consume_vacation, указав подходящее значение аргумента, например 7.\n","3. Вызовите метод get_vacation_details."],"metadata":{"id":"a_flBjZOCwYz"}},{"cell_type":"code","source":["class Employee:\n","    vacation_days = 28\n","\n","    def __init__(self, first_name, second_name, gender): # конструктор\n","        self.first_name = first_name\n","        self.second_name = second_name\n","        self.gender = gender\n","        self.remaining_vacation_days = self.vacation_days\n","\n","    def consume_vacation(self, days): # метод для вычитания дней\n","        self.remaining_vacation_days -= days\n","\n","    def get_vacation_details(self):\n","        return f'Остаток отпускных дней: {self.remaining_vacation_days}.'\n"],"metadata":{"id":"G4bUraN4CwBI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["employee = Employee(\"Мистер\", \"Крутой\", \"Мужчина\")\n","employee.consume_vacation(7)\n","print(employee.remaining_vacation_days)\n","print(employee.get_vacation_details())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tsf8bmQw7l_J","executionInfo":{"status":"ok","timestamp":1732012106764,"user_tz":-300,"elapsed":420,"user":{"displayName":"Алина Мингалёва","userId":"06959250630310689797"}},"outputId":"7338d60c-8941-4c38-c46d-774a04c04c73"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["21\n","Остаток отпускных дней: 21.\n"]}]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"8XGka5GtEBK1"}},{"cell_type":"markdown","source":["Задание:\n","\n","Создайте класс с именем Rectangle который имеет:\n","- Атрибуты ширины и высоты.\n","- Метод расчета площади.\n","- Метод расчета периметра.\n","- Метод отображения размеров прямоугольника.\n","\n","Создайте экземпляр класса Rectangleи продемонстрируйте его функциональность."],"metadata":{"id":"jQ4qqd8nEZBY"}},{"cell_type":"code","source":["class Rectangle:\n","    def __init__(self, weigh, hight):\n","        self.weigh = weigh\n","        self.hight = hight\n","\n","    def area_calculation(self):\n","        return f'Площадь: {self.weigh * self.hight}'\n","\n","    def perimeter_calculation(self):\n","        return f'Периметр: {self.weigh * 2 + self.hight * 2}'\n","\n","\n","rectangle = Rectangle(7, 5)\n","print(rectangle.area_calculation())\n","print(rectangle.perimeter_calculation())\n"],"metadata":{"id":"dG6uNPqTEAvt","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732012333591,"user_tz":-300,"elapsed":427,"user":{"displayName":"Алина Мингалёва","userId":"06959250630310689797"}},"outputId":"8361741b-36b5-4080-d688-33d1cd696c23"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Площадь: 35\n","Периметр: 24\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"0ct1u6lqE73j"}},{"cell_type":"markdown","source":["Задание: Создайте мини версию банковской системы:\n","\n","\n","Инструкции:\n","\n","1. Создайте класс BankAccountсо следующими атрибутами:\n","    - account_holder -  владелец счета\n","    - balance - баланс счета\n","\n","2. Реализуйте следующие методы:\n","    - Метод для инициализации владельца счета: имя владельца счета и установите начальный баланс на 0.\n","    - deposit(amount): Добавьте указанную сумму к балансу.\n","    - withdraw(amount): Вычесть указанную сумму из баланса, если средств достаточно; в противном случае вывести предупреждение.\n","    - get_balance(): Возврат текущего баланса.\n","\n","\n","Создайте объект класса и продемонстрируйте его возможности"],"metadata":{"id":"FOpIpcLxE-WK"}},{"cell_type":"code","source":["class BankAccountсо:\n","    opening_balance = 0\n","\n","    def __init__(self, account_holder):\n","        self.account_holder = account_holder\n","        self.balance = self.opening_balance\n","\n","    def deposit(self, deposit_sum):\n","        self.balance += deposit_sum\n","\n","    def withdraw(self, withdraw_sum):\n","        if self.balance >= withdraw_sum:\n","            self.balance -= withdraw_sum\n","        else:\n","          print('Недостаточно средств')\n","\n","    def get_balance(self):\n","        return f'Текущий баланс владельца счета с именем ' \\\n","         f'{self.account_holder}: {self.balance}'\n","\n","\n","acc_name = input('Введите имя владельца счета: ')\n","acc_deposit = int(input('Внести сумму: '))\n","acc_withdraw = int(input('Снять сумму: '))\n","\n","\n","banc_acc = BankAccountсо(acc_name)\n","banc_acc.deposit(acc_deposit)\n","banc_acc.withdraw(acc_withdraw)\n","print(banc_acc.get_balance())\n"],"metadata":{"id":"WWXNIUrCE99W","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732015568584,"user_tz":-300,"elapsed":12874,"user":{"displayName":"Алина Мингалёва","userId":"06959250630310689797"}},"outputId":"e5891a51-18ae-4db1-e8bb-dde6533c7284"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите имя владельца счета: роап\n","Внести сумму: 500\n","Снять сумму: 400\n","Текущий баланс владельца счета с именем роап: 100\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"C5DX5Uf2FfP6"}},{"cell_type":"markdown","source":["Возьмите код и задание (Рыцарь и дракон) из предыдущей практики и реализуйте его с применением классов"],"metadata":{"id":"0cR-MYepFgz6"}},{"cell_type":"code","source":["import random\n","\n","\n","def battle(knight, dragon):\n","    while knight[\"health\"] > 0 and dragon[\"health\"] > 0:\n","        print(battle_system(knight, dragon))\n","        if dragon[\"health\"] > 0:\n","            print(battle_system(dragon, knight))\n","\n","    if knight[\"health\"] > 0:\n","        print(f\"{knight['name']} победил дракона {dragon['name']}!\")\n","    else:\n","        print(f\"{dragon['name']} победил {knight['name']}!\")\n","\n","\n","def battle_system(fighter, defender):\n","    damage_done = random.randint(fighter['damage'] - 10, fighter['damage'] + 10)\n","    defender[\"health\"] -= damage_done\n","    return f\"{fighter['name']} атаковал {defender['name']}, урон: \" \\\n","     f\"{damage_done}, оставшееся здоровье: {defender['health']}\"\n","\n","\n","class Knight:\n","    def __init__(self, name, armor, weapon, damage, health):\n","        self.name = name\n","        self.armor = armor\n","        self.weapon = weapon\n","        self.damage = damage\n","        self.health = health\n","    def knight_create(self):\n","        knight = {\n","            \"name\": self.name,\n","            \"armor\": self.armor,\n","            \"weapon\": self.weapon,\n","            \"damage\": self.damage,\n","            \"health\": self.health\n","        }\n","        return knight\n","\n","\n","class Dragon:\n","    def __init__(self, name, damage, health):\n","        self.name = name\n","        self.damage = damage\n","        self.health = health\n","\n","    def dragon_create(self):\n","        dragon = {\n","            \"name\": self.name,\n","            \"damage\": self.damage,\n","            \"health\": self.health\n","        }\n","        return dragon\n","\n","\n","knight_name = input(\"Введите имя вашего рыцаря: \")\n","knight_armor = input(\"Введите название доспех: \")\n","knight_weapon = input(\"Введите название оружия: \")\n","knight_damage = int(input(\"Введите значение урона: \"))\n","knight_health = int(input(\"Введите значение здоровья: \"))\n","\n","\n","dragon_name = input(\"Введите имя дракона: \")\n","dragon_damage = int(input(\"Введите значение урона: \"))\n","dragon_health = int(input(\"Введите значение здоровья: \"))\n","\n","\n","knight = Knight(knight_name, knight_armor, knight_weapon, knight_damage,\n","                knight_health).knight_create()\n","dragon = Dragon(dragon_name, dragon_damage,\n","                dragon_health).dragon_create()\n","battle(knight, dragon)"],"metadata":{"id":"Oz9BZbhAFwua","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732309580607,"user_tz":-300,"elapsed":15487,"user":{"displayName":"Алина Мингалёва","userId":"06959250630310689797"}},"outputId":"81329a1d-caa0-46f4-98da-422ca84b79d1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Введите имя вашего рыцаря: вапвап\n","Введите название доспех: ыфер\n","Введите название оружия: вар\n","Введите значение урона: 9\n","Введите значение здоровья: 90\n","Введите имя дракона: варяс\n","Введите значение урона: 9\n","Введите значение здоровья: 90\n","вапвап атаковал варяс, урон: 17, оставшееся здоровье: 73\n","варяс атаковал вапвап, урон: -1, оставшееся здоровье: 91\n","вапвап атаковал варяс, урон: 3, оставшееся здоровье: 70\n","варяс атаковал вапвап, урон: 16, оставшееся здоровье: 75\n","вапвап атаковал варяс, урон: 7, оставшееся здоровье: 63\n","варяс атаковал вапвап, урон: 3, оставшееся здоровье: 72\n","вапвап атаковал варяс, урон: 11, оставшееся здоровье: 52\n","варяс атаковал вапвап, урон: -1, оставшееся здоровье: 73\n","вапвап атаковал варяс, урон: 15, оставшееся здоровье: 37\n","варяс атаковал вапвап, урон: 4, оставшееся здоровье: 69\n","вапвап атаковал варяс, урон: 0, оставшееся здоровье: 37\n","варяс атаковал вапвап, урон: 2, оставшееся здоровье: 67\n","вапвап атаковал варяс, урон: 19, оставшееся здоровье: 18\n","варяс атаковал вапвап, урон: 0, оставшееся здоровье: 67\n","вапвап атаковал варяс, урон: 7, оставшееся здоровье: 11\n","варяс атаковал вапвап, урон: 7, оставшееся здоровье: 60\n","вапвап атаковал варяс, урон: 9, оставшееся здоровье: 2\n","варяс атаковал вапвап, урон: 16, оставшееся здоровье: 44\n","вапвап атаковал варяс, урон: 18, оставшееся здоровье: -16\n","вапвап победил дракона варяс!\n"]}]},{"cell_type":"markdown","source":["# Дополнительное задание\n"],"metadata":{"id":"b_mJHXcQGI9t"}},{"cell_type":"markdown","source":["Задача: Система управления библиотекой\n","\n","**Цель**\n","Создайте простую систему управления библиотекой, которая позволит пользователям добавлять книги, брать книги, возвращать книги и просматривать список доступных книг.\n","\n","**Требования**\n","\n","1. **Определение класса**:\n","   – Создайте класс с именем «Book» со следующими атрибутами:\n","     - `title`\n","     - `автор`\n","     - `isbn`\n","     - `is_borrowed` (по умолчанию `False`)\n","\n","2. **Класс библиотеки**:\n","   - Создайте класс с именем Library, который управляет коллекцией книг.\n","   - Класс должен иметь следующие методы:\n","     - `__init__(self)`: инициализирует пустой список книг.\n","     - `add_book(self, book: Book)`: добавляет новую книгу в библиотеку.\n","     - `borrow_book(self, isbn: str)`: помечает книгу как заимствованную. Если книга не найдена или уже взята, выведите соответствующее сообщение.\n","     - `return_book(self, isbn: str)`: помечает книгу как возвращенную. Если книга не найдена или не была взята взаймы, выведите соответствующее сообщение.\n","     - `list_available_books(self)`: печатает список всех доступных книг в библиотеке.\n","     - `find_book(self, isbn: str)`: возвращает объект книги, если он найден, в противном случае возвращает `None`.\n","\n","3. **Взаимодействие с пользователем**:\n","   - Создайте простое текстовое меню, которое позволит пользователям:\n","     - Добавить книгу\n","     - Одолжить книгу\n","     - Вернуть книгу\n","     - Список доступных книг\n","     - Выйти из программы"],"metadata":{"id":"pnIUdFPcGOVL"}},{"cell_type":"code","source":["class Book:\n","    def __init__(self, title, author, isbn):\n","       self.title = title\n","       self.author = author\n","       self.isbn = isbn\n","\n","    def book_create(self):\n","        book = {\n","            \"title\": self.title,\n","            \"author\": self.author,\n","            \"isbn\": self.isbn,\n","            \"is_borrowed\": False\n","        }\n","        return book\n","\n","\n","class Library:\n","    def __init__(self):\n","        self.book_list = list()\n","\n","    def add_book(self, book: Book):\n","        self.added_book = dict();\n","        self.added_book[book] = Book\n","        self.book_list.append(self.added_book)\n","\n","    def borrow_book(self, isbn: str):\n","        self.borrow_book = dict();\n","        self.borrow_book[book] = Book\n","        self.book_list.append(self.borrow_book)\n","\n","\n","def main():\n","\n","    while True:\n","        print(\"\\nФункции:\")\n","        print(\"1. Добавить книгу\")\n","        print(\"2. Одолжить книгу\")\n","        print(\"3. Вернуть книгу\")\n","        print(\"4. Список доступных книг\")\n","        print(\"5. Выйти из программы\")\n","\n","        choice = int(input(\"Введите номер функции: \"))\n","\n","        if choice == 1:\n","            ...\n","\n","        elif choice == 2:\n","            ...\n","\n","        elif choice == 3:\n","            ...\n","\n","        elif choice == 4:\n","            ...\n","\n","        elif choice == 5:\n","            print(\"Выйти\")\n","            break\n","\n","        else:\n","            print(\"Не удалось получить число! Введите порядковый номер функции\")\n","\n","\n","main()"],"metadata":{"id":"GKKmdfN8GL6f"},"execution_count":null,"outputs":[]}]}