{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fdDdDHaE4KNBgvMIfCjJ2U7NY_5A7bzr","timestamp":1732614486327}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["**ФИО:**"],"metadata":{"id":"GEsFKJm-ABFp"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"wZMLYG_G_-19"},"outputs":[],"source":["Мингалева Алина Евгеньевна"]},{"cell_type":"markdown","source":["# Задание 1"],"metadata":{"id":"H4DrYnJjADuZ"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для разных типов сотрудников в компании. Реализуйте родительский класс Employee и дочерние классы Manager и Developer. Каждый класс должен иметь метод для расчета зарплаты на основе различных критериев класса.\n","\n","\n","Отрабатываемый принцип: Наследование\n","\n"],"metadata":{"id":"C17FWep-AF4a"}},{"cell_type":"code","source":["from os import copy_file_range\n","\n","\n","class Employee:\n","    hourly_rate = 300\n","\n","    def __init__(self, empl_name, days_worked, hours_per_day):\n","        self.empl_name = empl_name\n","        self.days_worked = days_worked\n","        self.hours_per_day = hours_per_day\n","\n","    def calc_salary(self):\n","        self.salary = self.days_worked * self.hours_per_day * self.hourly_rate\n","        return f'Зарплата работника {self.empl_name}: {self.salary}'\n","\n","\n","class Manager(Employee):\n","    hourly_rate = 200\n","\n","    def __init__(self, empl_name, days_worked, hours_per_day, cpi):\n","        self.cpi = cpi\n","        self.empl_name = empl_name #вот так должно работать :)\n","        self.days_worked = days_worked\n","        self.hours_per_day = hours_per_day\n","\n","    def calc_salary(self):\n","        self.salary = self.days_worked * self.hours_per_day * self.hourly_rate * self.cpi\n","        return f'Зарплата работника {self.empl_name}: {self.salary}'\n","\n","\n","class Developer(Employee):\n","    hourly_rate = 500\n","\n","    def __init__(self, empl_name, days_worked, hours_per_day,\n","                 number_of_programs):\n","        self.number_of_programs = number_of_programs\n","        self.empl_name = empl_name\n","        self.days_worked = days_worked\n","        self.hours_per_day = hours_per_day\n","\n","    def calc_salary(self):\n","        self.salary = self.days_worked * self.hours_per_day * self.hourly_rate * self.number_of_programs\n","        return f'Зарплата работника {self.empl_name}: {self.salary}'\n","\n","\n","employee = Employee(\"Employee\", 15, 8)\n","print(employee.calc_salary())\n","\n","manager = Manager(\"Manager\", 10, 10, 10)\n","print(manager.calc_salary())\n","\n","developer = Developer(\"Developer\", 10, 10, 10)\n","print(developer.calc_salary())"],"metadata":{"id":"aexGXzqCAFH7","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732955720761,"user_tz":-300,"elapsed":272,"user":{"displayName":"Алина Мингалёва","userId":"06959250630310689797"}},"outputId":"1ac54cdc-76f4-42c2-b61d-7f329b391da6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Зарплата работника Employee: 36000\n","Зарплата работника Manager: 200000\n","Зарплата работника Developer: 500000\n"]}]},{"cell_type":"markdown","source":["# Задание 2"],"metadata":{"id":"ERAi0TG5BI6v"}},{"cell_type":"markdown","source":["**Описание:** Создайте иерархию классов для различных типов транспортных средств (Необходим один родительский класс и 3 дочерних). Реализуйте метод, который позволяет каждому транспортному средству возвращать собственное описание (Метод в каждом классе должен иметь одинаковое название). Продемонстрируйте вызов данного метода для каждого транспортного средства.\n","\n","\n","Отрабатываемый принцип: Полиморфизм"],"metadata":{"id":"sJ3k7ZcgBK87"}},{"cell_type":"code","source":["class Transport:\n","    transp_type = \"Автомобиль\"\n","\n","    def __init__(self, transp_mark, engine_type, max_speed):\n","        self.transp_mark = transp_mark\n","        self.engine_type = engine_type\n","        self.max_speed = max_speed\n","\n","    def get_description(self):\n","        self.description = {\n","            'Марка машины': self.transp_mark,\n","            'Тип двигателя':self.engine_type,\n","            'Максимальная скорость': self.max_speed\n","            }\n","        return f'Описание транспортного средства {self.transp_type}: ' \\\n","              f'{self.description}'\n","\n","\n","class Tram(Transport):\n","    transp_type = \"Трамвай\"\n","\n","    def __init__(self, transp_mark, engine_type, max_speed, capacity):\n","        self.transp_mark = transp_mark\n","        self.engine_type = engine_type\n","        self.max_speed = max_speed\n","        self.capacity = capacity\n","\n","    def get_description(self):\n","        self.description = {\n","            'Марка трамвая': self.transp_mark,\n","            'Тип двигателя': self.engine_type,\n","            'Максимальная скорость': self.max_speed,\n","            'Вместимость': self.capacity\n","            }\n","        return f'Описание транспортного средства {self.transp_type}:'\\\n","        f'{self.description}'\n","\n","\n","class Boat(Transport):\n","    transp_type = \"Катер\"\n","\n","    def __init__(self, transp_mark, engine_type, max_speed):\n","        self.transp_mark = transp_mark\n","        self.engine_type = engine_type\n","        self.max_speed = max_speed\n","\n","    def get_description(self):\n","        self.description = {\n","            'Марка катера': self.transp_mark,\n","            'Тип двигателя': self.engine_type,\n","            'Максимальная скорость': self.max_speed\n","            }\n","        return f'Описание транспортного средства {self.transp_type}: ' \\\n","              f'{self.description}'\n","\n","\n","transport = Transport(\"Лада\", \"ДВС\", 210)\n","print(transport.get_description())\n","\n","tram = Tram(\"71-923\", \"Тяговый электродвигатель\", 75, 127)\n","print(tram.get_description())\n","\n","boat = Boat(\"ФЛ-55\", \"навесной\", 94)\n","print(boat.get_description())"],"metadata":{"id":"WOFOZQmDBKf4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732955629984,"user_tz":-300,"elapsed":278,"user":{"displayName":"Алина Мингалёва","userId":"06959250630310689797"}},"outputId":"be9a8341-8981-43fe-f54f-a1515afdaea0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Описание транспортного средства Автомобиль: {'Марка машины': 'Лада', 'Тип двигателя': 'ДВС', 'Максимальная скорость': 210}\n","Описание транспортного средства Трамвай:{'Марка трамвая': '71-923', 'Тип двигателя': 'Тяговый электродвигатель', 'Максимальная скорость': 75, 'Вместимость': 127}\n","Описание транспортного средства Катер: {'Марка катера': 'ФЛ-55', 'Тип двигателя': 'навесной', 'Максимальная скорость': 94}\n"]}]},{"cell_type":"markdown","source":["# Задание 3"],"metadata":{"id":"7E_SJXMJBvD4"}},{"cell_type":"markdown","source":["Онлайн-магазин:\n","- Создайте модель для онлайн-магазина с классами Product, Order, Customer, и ShoppingCart.\n","- Product включает информацию о цене, наличии на складе и категории товара.\n","Order обрабатывает процесс покупки, включая расчет цены с учетом скидок и налогов.\n","- Customer управляет информацией о пользователе и его истории заказов.\n","- ShoppingCart позволяет добавлять, удалять и обновлять количество товаров перед оформлением заказа.\n"],"metadata":{"id":"dd1mwKj_BxHa"}},{"cell_type":"code","source":["class Product:\n","    def __init__(self, name, price, category, number_of_products):\n","        self.name = name\n","        self.price = price\n","        self.category = category\n","        self.number_of_products = number_of_products\n","\n","    def product_create(self):\n","        product = {\n","            \"name\": self.name,\n","            \"price\": self.price,\n","            \"category\": self.category,\n","            \"number_of_products\": self.number_of_products\n","        }\n","        return product\n","\n","\n","class Order:\n","    nds = 1.2\n","\n","    def __init__(self, product, amount):\n","        self.product = product\n","        self.amount = amount\n","\n","    def buying(self):\n","        if self.amount <= self.product['number_of_products']:\n","            self.total_price = (self.product['price'] * self.amount) * 1.2\n","            print(f\"Название товара: {self.product['name']}\")\n","            print(f\"Количество товара: {self.amount}\")\n","            print(f\"Общая цена заказа: {self.total_price}\")\n","            print(f\"Заказ оформлен!\")\n","        else:\n","            print(\"Недостаточно товара на складе!\")\n","\n","\n","class Customer:\n","    def __init__(self, name, login):\n","        self.name = name\n","        self.login = login\n","        self.order_history = []\n","\n","    def add_to_order_history(self, order):\n","        self.order_history.append(order)\n","        print(f\"Заказ добавлен в историю для {self.name}!\")\n","\n","\n","class ShoppingCart:\n","    def __init__(self):\n","        self.cart = {}\n","\n","    def add_item(self, product, amount):\n","        if product['name'] in self.cart:\n","            self.cart[product['name']]['amount'] += amount\n","        else:\n","            self.cart[product['name']] = {\n","                'product': product,\n","                'amount': amount\n","            }\n","        print(f\"Товар {product['name']} добавлен в корзину!\")\n","\n","    def remove_item(self, product):\n","        if product in self.cart:\n","            del self.cart[product]\n","            print(f\"Товар {product} удален из корзины!\")\n","        else:\n","            print(\"Товар не найден в корзине!\")\n","\n","    def update_amount(self, product):\n","        if product in self.cart:\n","            self.cart[product]['self.amount'] = self.new_amount\n","            print(f\"Количество товара {product} обновлено!\")\n","        else:\n","            print(\"Товар не найден в корзине!\")\n","\n","    def view_cart(self):\n","        if not self.cart:\n","            print(\"Корзина пуста!\")\n","        else:\n","            for item, details in self.cart.items():\n","                print(f\"{item}: {details['amount']} шт.\")\n","\n","\n","product_1 = Product('Огурец', 30, 'Овощи', 5).product_create()\n","product_2 = Product('Помидор', 50, 'Овощи', 10).product_create()\n","\n","customer = Customer(\"Иван\", \"ivan123\")\n","\n","cart = ShoppingCart()\n","cart.add_item(product_1, 2)\n","cart.add_item(product_2, 3)\n","cart.view_cart()\n","\n","order = Order(product_1, 2)\n","order.buying()\n","\n","customer.add_to_order_history(order)\n","\n"],"metadata":{"id":"wkCcv_K-Bwdv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1734269934170,"user_tz":-300,"elapsed":238,"user":{"displayName":"Алина Мингалёва","userId":"06959250630310689797"}},"outputId":"5c9a9810-f612-4ef9-ff9d-93711585415b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Товар Огурец добавлен в корзину!\n","Товар Помидор добавлен в корзину!\n","Огурец: 2 шт.\n","Помидор: 3 шт.\n","Название товара: Огурец\n","Количество товара: 2\n","Общая цена заказа: 72.0\n","Заказ оформлен!\n","Заказ добавлен в историю для Иван!\n"]}]},{"cell_type":"markdown","source":["# Задание 4"],"metadata":{"id":"ih7iPlYfB7lL"}},{"cell_type":"markdown","source":["Симулятор космического корабля:\n","- Создайте симулятор управления космическим кораблем с классами SpaceShip, CrewMember, и Mission.\n","- SpaceShip имеет атрибуты для управления топливом, состоянием корпуса, и текущей скоростью.\n","- CrewMember контролирует здоровье, навыки, и роли в команде (например, пилот, инженер).\n","- Mission определяет цели, ресурсы, и возможные события (например, аварии, встречи с астероидами)."],"metadata":{"id":"zLwqVCbpCBvc"}},{"cell_type":"code","source":["class SpaceShip:\n","    def __init__(self, fuel, hull_integrity, speed):\n","        self.fuel = fuel\n","        self.housing_status = housing_status\n","        self.speed = speed\n","\n","\n","class CrewMember:\n","    def __init__(self, name, role, health, skills):\n","        self.name = name\n","        self.role = role\n","        self.health = health\n","        self.skills = skills\n","\n","class Mission:\n","    ..."],"metadata":{"id":"4NyrOOy8B9ED"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# Дополнительно:"],"metadata":{"id":"F7mRVsZjCXk0"}},{"cell_type":"markdown","source":["**Описание:** создайте консольную версию игры крестики-нолики, используя классы"],"metadata":{"id":"X4Lkf86UCc1h"}},{"cell_type":"code","source":["# prompt: создайте консольную версию игры крестики-нолики, используя классы\n","\n","class TicTacToe:\n","    def __init__(self):\n","        self.board = [' '] * 9\n","        self.current_player = 'X'\n","\n","    def print_board(self):\n","        print(\"-------------\")\n","        for i in range(3):\n","            print(\"|\", self.board[i * 3], \"|\", self.board[i * 3 + 1], \"|\", self.board[i * 3 + 2], \"|\")\n","            print(\"-------------\")\n","\n","    def make_move(self, position):\n","        if self.board[position - 1] == ' ':\n","            self.board[position - 1] = self.current_player\n","            return True\n","        else:\n","            print(\"Invalid move. Try again.\")\n","            return False\n","\n","    def check_win(self):\n","        win_conditions = [\n","            (0, 1, 2), (3, 4, 5), (6, 7, 8),  # Rows\n","            (0, 3, 6), (1, 4, 7), (2, 5, 8),  # Columns\n","            (0, 4, 8), (2, 4, 6)  # Diagonals\n","        ]\n","        for a, b, c in win_conditions:\n","            if self.board[a] == self.board[b] == self.board[c] != ' ':\n","                return self.board[a]\n","        return None\n","\n","    def check_draw(self):\n","        return ' ' not in self.board\n","\n","    def switch_player(self):\n","        self.current_player = 'O' if self.current_player == 'X' else 'X'\n","\n","    def play(self):\n","        while True:\n","            self.print_board()\n","            try:\n","                move = int(input(f\"Player {self.current_player}, enter your move (1-9): \"))\n","                if 1 <= move <= 9:\n","                    if self.make_move(move):\n","                        winner = self.check_win()\n","                        if winner:\n","                            self.print_board()\n","                            print(f\"Player {winner} wins!\")\n","                            break\n","                        elif self.check_draw():\n","                            self.print_board()\n","                            print(\"It's a draw!\")\n","                            break\n","                        else:\n","                            self.switch_player()\n","                else:\n","                    print(\"Invalid input. Please enter a number between 1 and 9.\")\n","            except ValueError:\n","                print(\"Invalid input. Please enter a number.\")\n","\n","if __name__ == \"__main__\":\n","    game = TicTacToe()\n","    game.play()"],"metadata":{"id":"x9OxpNsyCcUo","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732958985276,"user_tz":-300,"elapsed":75881,"user":{"displayName":"Алина Мингалёва","userId":"06959250630310689797"}},"outputId":"148b61a0-6ab0-4b63-a5a2-b61b917d95d7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["-------------\n","|   |   |   |\n","-------------\n","|   |   |   |\n","-------------\n","|   |   |   |\n","-------------\n","Player X, enter your move (1-9): 5\n","-------------\n","|   |   |   |\n","-------------\n","|   | X |   |\n","-------------\n","|   |   |   |\n","-------------\n","Player O, enter your move (1-9): 7\n","-------------\n","|   |   |   |\n","-------------\n","|   | X |   |\n","-------------\n","| O |   |   |\n","-------------\n","Player X, enter your move (1-9): 4\n","-------------\n","|   |   |   |\n","-------------\n","| X | X |   |\n","-------------\n","| O |   |   |\n","-------------\n","Player O, enter your move (1-9): 1\n","-------------\n","| O |   |   |\n","-------------\n","| X | X |   |\n","-------------\n","| O |   |   |\n","-------------\n","Player X, enter your move (1-9): 6\n","-------------\n","| O |   |   |\n","-------------\n","| X | X | X |\n","-------------\n","| O |   |   |\n","-------------\n","Player X wins!\n"]}]}]}